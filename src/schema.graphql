# import Event, EventOrderByInput, LocationWhereUniqueInput!, NotificationWhereUniqueInput, PersonWhereUniqueInput, SongWhereUniqueInput, EventCategoryWhereUniqueInput from "./generated/prisma.graphql"

type Query {
  feed(filter: String, skip: Int, first: Int, orderBy: EventOrderByInput): Feed!
}

type Mutation {
  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  createEvent(
    start: DateTime!,
    end: DateTime!,
    name: String!,
    people: [String!],
    location: String!,
    notifications: [String!],
    songs: [String!],
    category: String,
  ): Event!
  # vote(linkId: ID!): Vote!
}

# type Subscription {
#   newLink: LinkSubscriptionPayload
#   newVote: VoteSubscriptionPayload
# }

type Feed {
  events: [Event!]!
  count: Int!
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  events: [Event!]!
}
